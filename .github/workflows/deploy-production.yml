name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip build cache'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.7.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache build artifacts
        if: ${{ !inputs.skip_cache }}
        uses: actions/cache@v4
        with:
          path: |
            dist
            .vite
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Remove package-lock.json
        run: rm -f package-lock.json

      - name: Install dependencies
        run: |
          pnpm install --no-frozen-lockfile
          
      - name: Lint code
        run: pnpm lint || true

      - name: Build project
        run: |
          echo "Building for production..."
          pnpm build
          
          # Report build size
          echo "## Build Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -type f -name "*.js" -o -name "*.css" | while read file; do
            size=$(du -h "$file" | cut -f1)
            echo "| ${file#dist/} | $size |" >> $GITHUB_STEP_SUMMARY
          done

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: 'production',
                required_contexts: [],
                auto_merge: false,
                description: 'Deploying to Cloudflare Pages'
              });
              
              console.log('Created deployment:', deployment.data.id);
              core.setOutput('deployment_id', deployment.data.id);
              return deployment.data.id;
            } catch (error) {
              console.error('Failed to create deployment:', error);
              core.setOutput('deployment_id', '');
              return null;
            }

      - name: Deploy to Cloudflare Pages
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          echo "Starting deployment to Cloudflare Pages..."
          
          # Deploy with wrangler
          output=$(pnpm dlx wrangler pages deploy dist \
            --project-name=qsafe \
            --branch=main \
            --commit-hash=${{ github.sha }} \
            --commit-message="${{ github.event.head_commit.message }}" \
            2>&1 | tee deploy.log)
          
          # Extract deployment URL from output
          deployment_url=$(echo "$output" | grep -oP 'https://[^\s]+\.pages\.dev' | head -1)
          
          if [ -z "$deployment_url" ]; then
            # Fallback URL if extraction fails
            deployment_url="https://qsafe.pages.dev"
          fi
          
          echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT
          echo "Deployment URL: $deployment_url"
          
          # Add to summary
          echo "## Deployment Successful! ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** [$deployment_url]($deployment_url)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** main" >> $GITHUB_STEP_SUMMARY

      - name: Update deployment status (success)
        if: success() && steps.deployment.outputs.deployment_id != ''
        uses: actions/github-script@v7
        env:
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.deployment_id }}
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.deployment_url }}
        with:
          script: |
            if (!process.env.DEPLOYMENT_ID) {
              console.log('No deployment ID available, skipping status update');
              return;
            }
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: parseInt(process.env.DEPLOYMENT_ID),
              state: 'success',
              environment_url: process.env.DEPLOYMENT_URL || 'https://qsafe.pages.dev',
              description: 'Deployment successful'
            });

      - name: Update deployment status (failure)
        if: failure() && steps.deployment.outputs.deployment_id != ''
        uses: actions/github-script@v7
        env:
          DEPLOYMENT_ID: ${{ steps.deployment.outputs.deployment_id }}
        with:
          script: |
            if (!process.env.DEPLOYMENT_ID) {
              console.log('No deployment ID available, skipping status update');
              return;
            }
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: parseInt(process.env.DEPLOYMENT_ID),
              state: 'failure',
              description: 'Deployment failed'
            });

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist
            deploy.log
          retention-days: 7

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Create issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Deployment failed: ${context.sha.substring(0, 7)}`,
              body: `## Deployment Failure
              
              **Commit:** ${context.sha}
              **Branch:** main
              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              
              Please check the workflow logs for more details.`,
              labels: ['deployment', 'bug']
            });